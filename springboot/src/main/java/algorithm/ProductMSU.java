package main.java.algorithm;

import java.util.*;
import java.text.*;

public class Product implements Comparable<Product>{
    private Integer argoID;
    private Integer plant;
    private Integer buildComplete;
    private String slotStatus;
    private String planProductType;
    private String buildCategory;
    private String shipRevenueType;
    private Integer salesOrder;
    private String forecastID;
    private String slotID_UTID;
    private String secondaryCustomerName;
    private String buildProduct;
    private String productPN;
    private String committedShip$;
    private String shipRisk_Upside;
    private String shipRiskReason;
    private Date MRPDate;
    private Date intOpsShipReadinessDate;
    private Date MFGCommitDate;
    private Date shipRecogDate;
    private Date handOffDateToDE;
    private Date handOffDateBackToMFG;
    private Date installStartDate;
    private Integer cycleTimeDays;
    private String slotPlanNote;
    private String commentFor$Change;
    private String configurationNote;
    private String dropShip;
    private String MFGStatus;
    private Integer quantity;
    private Integer RMATool;
    private String new_Used;
    private Date coreNeedDate;
    private Date coreArrivalDate;
    private Date refurbStartDate;
    private Date refurbCompleteDate;
    private String donorStatus;
    private String coreUTID;
    private String coreNotes;
    private String fabID;
    private String flex01;
    private String flex02;
    private String flex03;
    private String flex04;

    public ProductMSU (Product p){
        argoID = p.getArgoID();
        plant = p.getPlant();
        buildComplete = p.getBuildComplete;
        slotStatus = p.getSlotStatus();
        planProductType = p.getPlanProductType();
        buildCategory = p.getBuildCategory();
        shipRevenueType = p.getShipRevenueType();
        salesOrder = p.getSalesOrder();
        forecastID = p.getForecastID();
        slotID_UTID = p.getSlotID_UTID();
        secondaryCustomerName = p.getSecondaryCustomerName();
        buildProduct = p.getBuildProduct();
        productPN = p.getProductPN();
        committedShip$ = p.getCommittedShip$();
        shipRisk_Upside = p.getShipRisk_Upside();
        shipRiskReason = p.getShipRiskReason();
        cycleTimeDays = p.getCycleTimeDays();
        slotPlanNote = p.getSlotPlanNote();
        commentFor$Change = p.getCommentFor$Change();
        configurationNote = p.getConfigurationNote();
        dropShip = p.getDropShip();
        MFGStatus = p.getMFGStatus();
        quantity = p.getQuantity();
        RMATool = p.getRMATool();
        new_Used = p.getNew_Used();
        donorStatus = p.getDonorStatus();
        coreUTID = p.getCoreUTID();
        coreNotes = p.getCoreNotes();
        fabID = p.getFabID();
        flex01 = p.getFlex01();
        flex02 = p.getFlex02();
        flex03 = p.getFlex03();
        flex04 = p.getFlex04();
        
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

        MRPDate = p.getMRPDate();
        intOpsShipReadinessDate = p.getIntOpsShipReadinessDate();
        MFGCommitDate = p.getMFGCommitDate();
        shipRecogDate = p.getShipRecogDate();
        handOffDateToDE = p.getHandOffDateToDE();
        handOffDateBackToMFG = p.getHandOffDateBackToMFG();
        installStartDate = p.getInstallStartDate();
        coreNeedDate = p.getCoreNeedDate();
        coreArrivalDate = p.getCoreArrivalDate();
        refurbStartDate = p.getRefurbStartDate();
        refurbCompleteDate = p.getRefurbCompleteDate();
}